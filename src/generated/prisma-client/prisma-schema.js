module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBurger {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Burger {
  id: ID!
  createdAt: DateTime!
  description: String!
  restaurant: String!
  name: String!
  rating: Int!
  postedBy: User
}

type BurgerConnection {
  pageInfo: PageInfo!
  edges: [BurgerEdge]!
  aggregate: AggregateBurger!
}

input BurgerCreateInput {
  id: ID
  description: String!
  restaurant: String!
  name: String!
  rating: Int!
  postedBy: UserCreateOneWithoutBurgersInput
}

input BurgerCreateManyWithoutPostedByInput {
  create: [BurgerCreateWithoutPostedByInput!]
  connect: [BurgerWhereUniqueInput!]
}

input BurgerCreateWithoutPostedByInput {
  id: ID
  description: String!
  restaurant: String!
  name: String!
  rating: Int!
}

type BurgerEdge {
  node: Burger!
  cursor: String!
}

enum BurgerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  restaurant_ASC
  restaurant_DESC
  name_ASC
  name_DESC
  rating_ASC
  rating_DESC
}

type BurgerPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  restaurant: String!
  name: String!
  rating: Int!
}

input BurgerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  restaurant: String
  restaurant_not: String
  restaurant_in: [String!]
  restaurant_not_in: [String!]
  restaurant_lt: String
  restaurant_lte: String
  restaurant_gt: String
  restaurant_gte: String
  restaurant_contains: String
  restaurant_not_contains: String
  restaurant_starts_with: String
  restaurant_not_starts_with: String
  restaurant_ends_with: String
  restaurant_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  AND: [BurgerScalarWhereInput!]
  OR: [BurgerScalarWhereInput!]
  NOT: [BurgerScalarWhereInput!]
}

type BurgerSubscriptionPayload {
  mutation: MutationType!
  node: Burger
  updatedFields: [String!]
  previousValues: BurgerPreviousValues
}

input BurgerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BurgerWhereInput
  AND: [BurgerSubscriptionWhereInput!]
  OR: [BurgerSubscriptionWhereInput!]
  NOT: [BurgerSubscriptionWhereInput!]
}

input BurgerUpdateInput {
  description: String
  restaurant: String
  name: String
  rating: Int
  postedBy: UserUpdateOneWithoutBurgersInput
}

input BurgerUpdateManyDataInput {
  description: String
  restaurant: String
  name: String
  rating: Int
}

input BurgerUpdateManyMutationInput {
  description: String
  restaurant: String
  name: String
  rating: Int
}

input BurgerUpdateManyWithoutPostedByInput {
  create: [BurgerCreateWithoutPostedByInput!]
  delete: [BurgerWhereUniqueInput!]
  connect: [BurgerWhereUniqueInput!]
  set: [BurgerWhereUniqueInput!]
  disconnect: [BurgerWhereUniqueInput!]
  update: [BurgerUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [BurgerUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [BurgerScalarWhereInput!]
  updateMany: [BurgerUpdateManyWithWhereNestedInput!]
}

input BurgerUpdateManyWithWhereNestedInput {
  where: BurgerScalarWhereInput!
  data: BurgerUpdateManyDataInput!
}

input BurgerUpdateWithoutPostedByDataInput {
  description: String
  restaurant: String
  name: String
  rating: Int
}

input BurgerUpdateWithWhereUniqueWithoutPostedByInput {
  where: BurgerWhereUniqueInput!
  data: BurgerUpdateWithoutPostedByDataInput!
}

input BurgerUpsertWithWhereUniqueWithoutPostedByInput {
  where: BurgerWhereUniqueInput!
  update: BurgerUpdateWithoutPostedByDataInput!
  create: BurgerCreateWithoutPostedByInput!
}

input BurgerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  restaurant: String
  restaurant_not: String
  restaurant_in: [String!]
  restaurant_not_in: [String!]
  restaurant_lt: String
  restaurant_lte: String
  restaurant_gt: String
  restaurant_gte: String
  restaurant_contains: String
  restaurant_not_contains: String
  restaurant_starts_with: String
  restaurant_not_starts_with: String
  restaurant_ends_with: String
  restaurant_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  postedBy: UserWhereInput
  AND: [BurgerWhereInput!]
  OR: [BurgerWhereInput!]
  NOT: [BurgerWhereInput!]
}

input BurgerWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBurger(data: BurgerCreateInput!): Burger!
  updateBurger(data: BurgerUpdateInput!, where: BurgerWhereUniqueInput!): Burger
  updateManyBurgers(data: BurgerUpdateManyMutationInput!, where: BurgerWhereInput): BatchPayload!
  upsertBurger(where: BurgerWhereUniqueInput!, create: BurgerCreateInput!, update: BurgerUpdateInput!): Burger!
  deleteBurger(where: BurgerWhereUniqueInput!): Burger
  deleteManyBurgers(where: BurgerWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  burger(where: BurgerWhereUniqueInput!): Burger
  burgers(where: BurgerWhereInput, orderBy: BurgerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Burger]!
  burgersConnection(where: BurgerWhereInput, orderBy: BurgerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BurgerConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  burger(where: BurgerSubscriptionWhereInput): BurgerSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  burgers(where: BurgerWhereInput, orderBy: BurgerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Burger!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  burgers: BurgerCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutBurgersInput {
  create: UserCreateWithoutBurgersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBurgersInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  burgers: BurgerUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneWithoutBurgersInput {
  create: UserCreateWithoutBurgersInput
  update: UserUpdateWithoutBurgersDataInput
  upsert: UserUpsertWithoutBurgersInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBurgersDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutBurgersInput {
  update: UserUpdateWithoutBurgersDataInput!
  create: UserCreateWithoutBurgersInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  burgers_every: BurgerWhereInput
  burgers_some: BurgerWhereInput
  burgers_none: BurgerWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    