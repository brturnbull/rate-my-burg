enum BurgerOrderByInput {
    description_ASC
    description_DESC
    name_ASC
    name_DESC
    createdAt_ASC
    createdAt_DESC
}

type Query {
    info: String!
    feed(filter: String, skip: Int, first: Int, orderBy: BurgerOrderByInput): Feed!
}

type Feed {
    burgers: [Burger!]!
    count: Int!
}

type Mutation {
    post(name: String!, description: String!, restaurant: String!, rating: Int!): Burger
    update(id: String!, name: String, description: String, restaurant: String, rating: Int): Burger
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    voteForBurger(id: ID!): Vote
    remove(id: ID!): Burger
}

type Burger {
    id: ID!,
    description: String!
    restaurant: String!
    name: String!
    rating: Int!
    postedBy: User
    votes: [Vote!]!
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    burgers: [Burger!]!
}

type AuthPayload {
    token: String
    user: User
}

type Subscription {
    newBurger: Burger
    updatedBurger: Burger
    newVote: Vote
}

type Vote {
    id: ID!
    burger: Burger!
    user: User!
}
